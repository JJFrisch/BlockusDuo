import random

PLAYERS = {
    1: 'human',
    2: 'random'   
}

piece_id = {1: "i1", 2: "i2", 3: "i3", 4: "quadruple line", 5: "quintuple line", 6: "z4", 7: "t4", 8: "l4", 9: "square", 10: "w", 11: "p", 12: "f", 13: "t5", 14: "x", 15: "z5", 16: "v5", 17: "u", 18: "v3", 19: "n", 20: "y", 21: "l5"}
piece_possible_orientations = [[0], [0,1], [0,1], [0,1], [0,1], [0,1,4,5], [0,1,2,3], [0,1,2,3,4,5,6,7], [0], [0,1,2,3], [0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7], [0,1,2,3], [0], [0,1,4,5], [0,1,2,3], [0,1,2,3], [0,1,2,3], [0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7], [0,1,2,3,4,5,6,7]]


class Board:
    '''
	Board class initialization
	s - The length of the sides of the board in number of blocks
	where 0,0 represents the top left corner

    1 represents player 1's placed pieces
    2 represents player 2's placed pieces
	'''

    def __init__(self, s: int):
        
        self.running = True
        self.state = "p1_turn"

        self.dim = s
        self.board = [[0 for i in range(s)] for j in range(s)]
        self.turn = 1

        #change the color of the start positions
        self.board[s - 5][s - 5] = 1
        self.board[4][4] = 2

        # score is the # of tiles placed by each player
        self.p1_score = 0
        self.p2_score = 0

        # possible squares and corner avalibility (x,y,NE,SE,SW,NW)
        self.p1_possible_squares = [[5, 5, True, True, True, True]]
        self.p2_possible_squares = [[9, 9, True, True, True, True]]

        # available pieces
        self.p1_inv = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
        self.p2_inv = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]

    def print(self):
        print(self)

    def __str__(self): 
        s = "   " + " ".join([chr(ord('@')+x+1) for x in list(range(len(self.board)))]) + "\n"
        n=1
        for line in self.board:
            rowNumStr = str(n)
            if len(rowNumStr) == 1:
                rowNumStr = " " + rowNumStr
            s+=rowNumStr + " "
            for col in line:
                if col == 0:
                    s+="□ "
                elif col == 1:
                    s+="\033[96m▣ \033[0m"
                else:
                    s+="\033[92m▣ \033[0m"
            s+="\n"
            n+=1
        return s
    
    def getItem(self, coord: tuple[int]):
        #we dont need these checks, eventually theyre prob gonna be removed anyways for that optimization # Always good to have checks!!!! # never know when it'll help with our errors
        if len(coord) != 2:
            raise IndexError
        if coord[0] < 0 or coord[0] >= len(
                self.board) or coord[1] < 0 or coord[1] >= len(self.board[0]):
            raise IndexError
        return self.board[coord[0]][coord[1]]

    def __getitem__(self, coord: tuple[int]):
        return self.getItem(coord)

    def getCorners(self, x, y):
        corners = []
        corners.append([x+1, y-1])
        corners.append([x+1, y+1])
        corners.append([x-1, y+1])
        corners.append([x-1, y-1])
        return corners
        
    def getEdges(self, x, y):
        edges = []
        edges.append([x+1, y])
        edges.append([x, y+1])
        edges.append([x-1, y])
        edges.append([x, y-1])
        return edges

    #legal moves
    #

    
    # returns a list of all legal moves for current player's turn
    def legalMoves(self, turn):
       # check all corners of the current player
        legal_placements = []
        for y in range(0,self.dim):
            for x in range(0,self.dim):
                legal = False
                for corner in self.getCorners(x,y):
                    if self.board[y][x] == turn:
                        legal = True
                for edge in self.getEdges(x,y):
                    if self.board[y][x] == turn:
                        legal = False

                if legal:
                    legal_placements.append([x,y])

        print(legal_placements)
        print("DEBUG: len(legal_placements): ",len(legal_placements)) # appears to be empty
        # assume we have a list of possible corners
        moves = [] # list of all legal moves (including different orientations)
        dots = self.p1_possible_squares if turn == 1 else self.p2_possible_squares
        
        inv = self.p1_inv if turn == 1 else self.p2_inv
        for corner in legal_placements:
            # check each piece for the current corner
            for piece in inv:
                # check each orientation for the current piece
                for orientation in pieces[piece]:
                    grid = orientation[0]
                    board = self.board
                    goodPlace = True    
                    for square in grid:
                        x = corner[0] + square[0]
                        y = corner[1] + square[1]

                        # check bounds
                        if(x < 0 or x >= self.dim or y < 0 or y >= self.dim):
                            goodPlace = False
                            # print something ?
                            break

                        # check if the square is occupied
                        if(board[x][y] != 0):
                            goodPlace = False
                            break

                        # check if the player has placed at an adjacent square, first by checking bounds and then checking status of adj. squares
                        if((x-1 >= 0 and board[x-1][y] == turn) or (x+1 < self.dim and board[x+1][y]) == turn or (y-1 >= 0 and board[x][y-1] == turn) or (y+1 < self.dim and board[x][y+1] == turn)):
                            goodPlace = False
                            break
                    
                    if goodPlace:
                        moves.append(orientation)
                        # can add more information about the move
                        
                

        print("DEBUG: len(moves): ",len(moves))     
        return moves

  

    def randomTurn(self):
        # possible = self.legalMoves()
        # turnIndex = random.randint(len(possible))
        # playing the move logic here (depends on the information passed from legalMoves)
        # self.place(possible[turnIndex])
        return
    
    # UI, etc. for a human to be able to play a piece
    def humanTurn(self):

        # input + call placing
        # self.place()
        return

    def makeTurn(self):
        if PLAYERS[self.turn] == 'human':
            self.humanTurn()
        elif PLAYERS[self.turn] == 'random':
            self.randomTurn()
        if self.turn == 1:
            self.turn = 2
        elif self.turn == 2:
            self.turn = 1
        
    def place(self, i, j, id, orientation, turn):
        print(pieces[id][orientation])
        piece = pieces[id][orientation]

        # check if peice is valid
        # if id in self.played[plr]:
        #     return  # unable to play

        #check if piece is inbounds
        # if self.inBounds(i, j, id, orientation):
        #     return  # unable to play
    
        self.board[i][j] = turn
        for square in piece[0]:
            aj, ai = square
            self.board[i + ai][j + aj] = turn

        # update possible squares (need data in pieces file)
    

        
    def inBounds(self, x, y, id, orientation):
        # we could for ease of inbounds on board keep values of dist from center x,y for each orientation
        # along the lines of more processing beforehand is better

        if x - pieces[id][orientation]['left'] < 0 and x - pieces[id][
                orientation]['right'] >= self.dim:
            return False

        if y - pieces[id][orientation]['top'] < 0 and x - pieces[id][
                orientation]['bottom'] >= self.dim:
            return False

        return True

pieces = {1: [[[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]], [[], [[0, 0]], [[0, 0]], [[0, 0]], [[0, 0]]]], 2: [[[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[1, 0]], [[1, 0]], [[1, 0]], [[0, 0]], [[0, 0]]], [[[0, 1]], [[0, 0]], [[0, 1]], [[0, 1]], [[0, 0]]], [[[-1, 0]], [[0, 0]], [[0, 0]], [[-1, 0]], [[-1, 0]]], [[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[0, -1]], [[0, 0]], [[0, -1]], [[0, -1]], [[0, 0]]], [[[1, 0]], [[1, 0]], [[1, 0]], [[0, 0]], [[0, 0]]], [[[0, 1]], [[0, 0]], [[0, 1]], [[0, 1]], [[0, 0]]], [[[-1, 0]], [[0, 0]], [[0, 0]], [[-1, 0]], [[-1, 0]]]], 3: [[[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[1, 0], [-1, 0]], [[1, 0]], [[1, 0]], [[-1, 0]], [[-1, 0]]], [[[0, 1], [0, -1]], [[0, -1]], [[0, 1]], [[0, 1]], [[0, -1]]], [[[-1, 0], [1, 0]], [[1, 0]], [[1, 0]], [[-1, 0]], [[-1, 0]]], [[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [0, 1]], [[0, 1]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[1, 0], [-1, 0]], [[1, 0]], [[1, 0]], [[-1, 0]], [[-1, 0]]], [[[0, 1], [0, -1]], [[0, -1]], [[0, 1]], [[0, 1]], [[0, -1]]], [[[-1, 0], [1, 0]], [[1, 0]], [[1, 0]], [[-1, 0]], [[-1, 0]]]], 4: [[[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[1, 0], [-1, 0], [-2, 0]], [[1, 0]], [[1, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 1], [0, -1], [0, -2]], [[0, -2]], [[0, 1]], [[0, 1]], [[0, -2]]], [[[-1, 0], [1, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-1, 0]], [[-1, 0]]], [[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -1]], [[0, -1]], [[0, 2]]], [[[1, 0], [-1, 0], [-2, 0]], [[1, 0]], [[1, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 1], [0, -1], [0, -2]], [[0, -2]], [[0, 1]], [[0, 1]], [[0, -2]]], [[[-1, 0], [1, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-1, 0]], [[-1, 0]]]], 5: [[[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[1, 0], [-1, 0], [-2, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 1], [0, -1], [0, -2], [0, 2]], [[0, -2]], [[0, 2]], [[0, 2]], [[0, -2]]], [[[-1, 0], [1, 0], [2, 0], [-2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -1], [0, 1], [0, 2], [0, -2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[1, 0], [-1, 0], [-2, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 1], [0, -1], [0, -2], [0, 2]], [[0, -2]], [[0, 2]], [[0, 2]], [[0, -2]]], [[[-1, 0], [1, 0], [2, 0], [-2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]]], 6: [[[[1, 0], [0, 1], [-1, 1]], [[0, 1], [1, 0]], [[1, 0]], [[0, 0], [-1, 1]], [[-1, 1]]], [[[0, 1], [-1, 0], [1, -1]], [[1, -1]], [[0, 1], [1, -1]], [[0, 1], [-1, 0]], [[-1, 0], [1, -1]]], [[[-1, 0], [0, -1], [1, 1]], [[0, -1], [1, 1]], [[1, 1]], [[-1, 0], [1, 1]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0], [-1, 1]], [[0, -1], [1, 0]], [[1, 0], [-1, 1]], [[-1, 1]], [[0, -1], [-1, 1]]], [[[-1, 0], [0, 1], [1, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0], [1, 1]], [[1, 1]]], [[[-1, 0], [0, 1], [1, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0], [1, 1]], [[1, 1]]], [[[-1, 0], [0, 1], [1, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0], [1, 1]], [[1, 1]]], [[[-1, 0], [0, 1], [1, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0], [1, 1]], [[1, 1]]], [[[-1, 0], [0, 1], [1, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0], [1, 1]], [[1, 1]]], [[[0, 1], [-1, 0], [1, -1]], [[1, -1]], [[0, 1], [1, -1]], [[0, 1], [-1, 0]], [[-1, 0], [1, -1]]], [[[-1, 0], [0, -1], [1, 1]], [[0, -1], [1, 1]], [[1, 1]], [[-1, 0], [1, 1]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0], [-1, 1]], [[0, -1], [1, 0]], [[1, 0], [-1, 1]], [[-1, 1]], [[0, -1], [-1, 1]]]], 7: [[[[0, -1], [1, 0], [-1, 0]], [[1, 0]], [[1, 0], [0, -1]], [[0, -1], [-1, 0]], [[-1, 0]]], [[[1, 0], [0, 1], [0, -1]], [[1, 0], [0, -1]], [[1, 0], [0, 1]], [[0, 1]], [[0, -1]]], [[[0, 1], [-1, 0], [1, 0]], [[1, 0]], [[0, 1], [1, 0]], [[0, 1], [-1, 0]], [[-1, 0]]], [[[-1, 0], [0, -1], [0, 1]], [[0, -1]], [[0, 1]], [[-1, 0], [0, 1]], [[-1, 0], [0, -1]]], [[[0, -1], [-1, 0], [1, 0]], [[-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0]]], [[[0, -1], [-1, 0], [1, 0]], [[-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0]]], [[[0, -1], [-1, 0], [1, 0]], [[-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0]]], [[[0, -1], [-1, 0], [1, 0]], [[-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0]]], [[[0, -1], [-1, 0], [1, 0]], [[-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0]]], [[[1, 0], [0, 1], [0, -1]], [[1, 0], [0, -1]], [[1, 0], [0, 1]], [[0, 1]], [[0, -1]]], [[[0, 1], [-1, 0], [1, 0]], [[1, 0]], [[0, 1], [1, 0]], [[0, 1], [-1, 0]], [[-1, 0]]], [[[-1, 0], [0, -1], [0, 1]], [[0, -1]], [[0, 1]], [[-1, 0], [0, 1]], [[-1, 0], [0, -1]]]], 8: [[[[0, -1], [-1, 0], [-2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [-2, 0]], [[-2, 0]]], [[[1, 0], [0, -1], [0, -2]], [[1, 0], [0, -2]], [[1, 0]], [[0, 0]], [[0, -2]]], [[[0, 1], [1, 0], [2, 0]], [[2, 0]], [[0, 1], [2, 0]], [[0, 1]], [[0, 0]]], [[[-1, 0], [0, 1], [0, 2]], [[0, 0]], [[0, 2]], [[-1, 0], [0, 2]], [[-1, 0]]], [[[0, -1], [1, 0], [2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [1, 0], [2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [1, 0], [2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [1, 0], [2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [1, 0], [2, 0]], [[0, 0]], [[0, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[1, 0], [0, -1], [0, -2]], [[1, 0], [0, -2]], [[1, 0]], [[0, 0]], [[0, -2]]], [[[0, 1], [1, 0], [2, 0]], [[2, 0]], [[0, 1], [2, 0]], [[0, 1]], [[0, 0]]], [[[-1, 0], [0, 1], [0, 2]], [[0, 0]], [[0, 2]], [[-1, 0], [0, 2]], [[-1, 0]]]], 9: [[[[1, 0], [0, 1], [1, 1]], [[1, 1]], [[1, 0]], [[0, 0]], [[0, 1]]], [[[0, 1], [-1, 0], [-1, 1]], [[0, 0]], [[0, 1]], [[-1, 1]], [[-1, 0]]], [[[-1, 0], [0, -1], [1, -1]], [[1, -1]], [[1, -1], [0, 0]], [[-1, 0]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0], [1, 1]], [[0, -1], [1, 0]], [[1, 1]], [[1, 1], [0, 0]], [[0, -1]]], [[[-1, 0], [0, 1], [-1, 1]], [[-1, 1]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1], [-1, 1]], [[-1, 1]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1], [-1, 1]], [[-1, 1]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1], [-1, 1]], [[-1, 1]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1], [-1, 1]], [[-1, 1]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[0, 1], [-1, 0], [-1, 1]], [[0, 0]], [[0, 1]], [[-1, 1]], [[-1, 0]]], [[[-1, 0], [0, -1], [1, -1]], [[1, -1]], [[1, -1], [0, 0]], [[-1, 0]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0], [1, 1]], [[0, -1], [1, 0]], [[1, 1]], [[1, 1], [0, 0]], [[0, -1]]]], 10: [[[[0, -1], [1, -1], [-1, 0], [-1, 1]], [[-1, 1], [0, 0], [1, -1]], [[1, -1]], [[0, -1], [-1, 0]], [[-1, 1]]], [[[1, 0], [1, 1], [0, -1], [1, -1]], [[1, -1]], [[1, 1]], [[1, 1], [0, 0]], [[0, -1]]], [[[0, 1], [-1, 1], [1, 0], [1, 1]], [[1, 0]], [[1, 1]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[-1, 0], [1, -1], [0, 1], [-1, 1]], [[1, -1]], [[1, -1], [0, 1]], [[-1, 1]], [[-1, 0], [1, -1]]], [[[0, -1], [-1, -1], [1, 0], [1, 1]], [[1, 1], [0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [1, 0]], [[1, 1]]], [[[0, -1], [-1, -1], [1, 0], [1, 1]], [[1, 1], [0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [1, 0]], [[1, 1]]], [[[0, -1], [-1, -1], [1, 0], [1, 1]], [[1, 1], [0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [1, 0]], [[1, 1]]], [[[0, -1], [-1, -1], [1, 0], [1, 1]], [[1, 1], [0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [1, 0]], [[1, 1]]], [[[0, -1], [-1, -1], [1, 0], [1, 1]], [[1, 1], [0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [1, 0]], [[1, 1]]], [[[1, 0], [1, 1], [0, -1], [1, -1]], [[1, -1]], [[1, 1]], [[1, 1], [0, 0]], [[0, -1]]], [[[0, 1], [-1, 1], [1, 0], [1, 1]], [[1, 0]], [[1, 1]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[-1, 0], [1, -1], [0, 1], [-1, 1]], [[1, -1]], [[1, -1], [0, 1]], [[-1, 1]], [[-1, 0], [1, -1]]]], 11: [[[[0, -1]], [[1, 0]], [[1, 1]], [[0, 1]], [[1, 1]], [[1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[1, 0]], [[1, 0]], [[1, 0]], [[0, 0]], [[0, 0]]], [[[0, 1]], [[0, 0]], [[0, 1]], [[0, 1]], [[0, 0]]], [[[-1, 0]], [[0, 0]], [[0, 0]], [[-1, 0]], [[-1, 0]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[0, -1]], [[-1, 0]], [[-1, 1]], [[0, 1]], [[-1, 1]], [[-1, 0]], [[0, -1]], [[0, -1]], [[0, 1]]], [[[1, 0]], [[1, 0]], [[1, 0]], [[0, 0]], [[0, 0]]], [[[0, 1]], [[0, 0]], [[0, 1]], [[0, 1]], [[0, 0]]], [[[-1, 0]], [[0, 0]], [[0, 0]], [[-1, 0]], [[-1, 0]]]], 12: [[[[1, -1], [0, -1], [0, 1], [-1, 0]], [[1, -1]], [[0, 1], [1, -1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]]], [[[1, 1], [1, 0], [-1, 0], [0, -1]], [[1, 0], [0, -1]], [[1, 1]], [[1, 1], [-1, 0]], [[-1, 0], [0, -1]]], [[[-1, 1], [0, 1], [0, -1], [1, 0]], [[0, -1], [1, 0]], [[0, 1], [1, 0]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[1, -1], [-1, 0], [1, 0], [0, 1]], [[1, -1]], [[1, 0], [0, 1]], [[-1, 0], [0, 1]], [[1, -1], [-1, 0]]], [[[-1, -1], [0, -1], [0, 1], [1, 0]], [[-1, -1]], [[0, 1], [-1, -1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]]], [[[-1, -1], [0, -1], [0, 1], [1, 0]], [[-1, -1]], [[0, 1], [-1, -1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]]], [[[-1, -1], [0, -1], [0, 1], [1, 0]], [[-1, -1]], [[0, 1], [-1, -1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]]], [[[-1, -1], [0, -1], [0, 1], [1, 0]], [[-1, -1]], [[0, 1], [-1, -1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]]], [[[-1, -1], [0, -1], [0, 1], [1, 0]], [[-1, -1]], [[0, 1], [-1, -1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]]], [[[1, 1], [1, 0], [-1, 0], [0, -1]], [[1, 0], [0, -1]], [[1, 1]], [[1, 1], [-1, 0]], [[-1, 0], [0, -1]]], [[[-1, 1], [0, 1], [0, -1], [1, 0]], [[0, -1], [1, 0]], [[0, 1], [1, 0]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[1, -1], [-1, 0], [1, 0], [0, 1]], [[1, -1]], [[1, 0], [0, 1]], [[-1, 0], [0, 1]], [[1, -1], [-1, 0]]]], 13: [[[[0, -1], [0, 1], [1, 1], [-1, 1]], [[1, 1]], [[1, 1], [0, -1]], [[0, -1], [-1, 1]], [[-1, 1]]], [[[1, 0], [-1, 0], [-1, 1], [1, -1]], [[1, -1]], [[1, 0], [-1, 1]], [[-1, 1]], [[-1, 0], [1, -1]]], [[[0, 1], [0, -1], [1, -1], [1, 1]], [[1, -1], [1, 1]], [[1, -1], [1, 1]], [[0, 1]], [[0, -1]]], [[[-1, 0], [1, 0], [1, 1], [-1, 1]], [[1, 0]], [[1, 1], [-1, 1]], [[1, 1], [-1, 1]], [[-1, 0]]], [[[0, -1], [0, 1], [-1, 1], [1, 1]], [[-1, 1]], [[-1, 1], [0, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [0, 1], [-1, 1], [1, 1]], [[-1, 1]], [[-1, 1], [0, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [0, 1], [-1, 1], [1, 1]], [[-1, 1]], [[-1, 1], [0, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [0, 1], [-1, 1], [1, 1]], [[-1, 1]], [[-1, 1], [0, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [0, 1], [-1, 1], [1, 1]], [[-1, 1]], [[-1, 1], [0, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[1, 0], [-1, 0], [-1, 1], [1, -1]], [[1, -1]], [[1, 0], [-1, 1]], [[-1, 1]], [[-1, 0], [1, -1]]], [[[0, 1], [0, -1], [1, -1], [1, 1]], [[1, -1], [1, 1]], [[1, -1], [1, 1]], [[0, 1]], [[0, -1]]], [[[-1, 0], [1, 0], [1, 1], [-1, 1]], [[1, 0]], [[1, 1], [-1, 1]], [[1, 1], [-1, 1]], [[-1, 0]]]], 14: [[[[1, 0], [0, -1], [-1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 0], [0, -1]], [[0, -1], [-1, 0]], [[-1, 0], [0, 1]]], [[[0, 1], [1, 0], [0, -1], [-1, 0]], [[1, 0], [0, -1]], [[0, 1], [1, 0]], [[0, 1], [-1, 0]], [[0, -1], [-1, 0]]], [[[-1, 0], [0, 1], [1, 0], [0, -1]], [[1, 0], [0, -1]], [[0, 1], [1, 0]], [[-1, 0], [0, 1]], [[-1, 0], [0, -1]]], [[[0, -1], [-1, 0], [0, 1], [1, 0]], [[0, -1], [1, 0]], [[0, 1], [1, 0]], [[-1, 0], [0, 1]], [[0, -1], [-1, 0]]], [[[-1, 0], [0, -1], [1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0], [0, 1]]], [[[-1, 0], [0, -1], [1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0], [0, 1]]], [[[-1, 0], [0, -1], [1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0], [0, 1]]], [[[-1, 0], [0, -1], [1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0], [0, 1]]], [[[-1, 0], [0, -1], [1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0], [0, -1]], [[0, -1], [1, 0]], [[1, 0], [0, 1]]], [[[0, 1], [1, 0], [0, -1], [-1, 0]], [[1, 0], [0, -1]], [[0, 1], [1, 0]], [[0, 1], [-1, 0]], [[0, -1], [-1, 0]]], [[[-1, 0], [0, 1], [1, 0], [0, -1]], [[1, 0], [0, -1]], [[0, 1], [1, 0]], [[-1, 0], [0, 1]], [[-1, 0], [0, -1]]], [[[0, -1], [-1, 0], [0, 1], [1, 0]], [[0, -1], [1, 0]], [[0, 1], [1, 0]], [[-1, 0], [0, 1]], [[0, -1], [-1, 0]]]], 15: [[[[0, -1], [1, -1], [0, 1], [-1, 1]], [[0, 1], [1, -1]], [[1, -1]], [[0, -1], [-1, 1]], [[-1, 1]]], [[[1, 0], [1, 1], [-1, 0], [1, -1]], [[1, -1]], [[1, 1]], [[1, 1], [-1, 0]], [[-1, 0], [1, -1]]], [[[0, 1], [-1, 1], [0, -1], [1, 1]], [[0, -1], [1, 1]], [[1, 1]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[-1, 0], [1, -1], [1, 0], [-1, 1]], [[1, -1]], [[1, 0], [-1, 1]], [[-1, 1]], [[-1, 0], [1, -1]]], [[[0, -1], [-1, -1], [0, 1], [1, 1]], [[0, 1], [-1, -1]], [[-1, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [-1, -1], [0, 1], [1, 1]], [[0, 1], [-1, -1]], [[-1, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [-1, -1], [0, 1], [1, 1]], [[0, 1], [-1, -1]], [[-1, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [-1, -1], [0, 1], [1, 1]], [[0, 1], [-1, -1]], [[-1, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[0, -1], [-1, -1], [0, 1], [1, 1]], [[0, 1], [-1, -1]], [[-1, -1]], [[0, -1], [1, 1]], [[1, 1]]], [[[1, 0], [1, 1], [-1, 0], [1, -1]], [[1, -1]], [[1, 1]], [[1, 1], [-1, 0]], [[-1, 0], [1, -1]]], [[[0, 1], [-1, 1], [0, -1], [1, 1]], [[0, -1], [1, 1]], [[1, 1]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[-1, 0], [1, -1], [1, 0], [-1, 1]], [[1, -1]], [[1, 0], [-1, 1]], [[-1, 1]], [[-1, 0], [1, -1]]]], 16: [[[[1, 0], [2, 0], [0, 1], [0, 2]], [[0, 2], [2, 0]], [[2, 0]], [[0, 0]], [[0, 2]]], [[[0, 1], [0, 2], [-1, 0], [-2, 0]], [[0, 0]], [[0, 2]], [[0, 2], [-2, 0]], [[-2, 0]]], [[[-1, 0], [-2, 0], [0, -1], [0, -2]], [[0, -2]], [[0, 0]], [[-2, 0]], [[-2, 0], [0, -2]]], [[[0, -1], [0, -2], [1, 0], [2, 0]], [[0, -2], [2, 0]], [[2, 0]], [[0, 0]], [[0, -2]]], [[[-1, 0], [-2, 0], [0, 1], [0, 2]], [[0, 2], [-2, 0]], [[-2, 0]], [[0, 0]], [[0, 2]]], [[[-1, 0], [-2, 0], [0, 1], [0, 2]], [[0, 2], [-2, 0]], [[-2, 0]], [[0, 0]], [[0, 2]]], [[[-1, 0], [-2, 0], [0, 1], [0, 2]], [[0, 2], [-2, 0]], [[-2, 0]], [[0, 0]], [[0, 2]]], [[[-1, 0], [-2, 0], [0, 1], [0, 2]], [[0, 2], [-2, 0]], [[-2, 0]], [[0, 0]], [[0, 2]]], [[[-1, 0], [-2, 0], [0, 1], [0, 2]], [[0, 2], [-2, 0]], [[-2, 0]], [[0, 0]], [[0, 2]]], [[[0, 1], [0, 2], [-1, 0], [-2, 0]], [[0, 0]], [[0, 2]], [[0, 2], [-2, 0]], [[-2, 0]]], [[[-1, 0], [-2, 0], [0, -1], [0, -2]], [[0, -2]], [[0, 0]], [[-2, 0]], [[-2, 0], [0, -2]]], [[[0, -1], [0, -2], [1, 0], [2, 0]], [[0, -2], [2, 0]], [[2, 0]], [[0, 0]], [[0, -2]]]], 17: [[[[0, -1], [1, -1], [0, 1], [1, 1]], [[1, 1], [1, -1]], [[1, 1], [1, -1]], [[0, -1]], [[0, 1]]], [[[1, 0], [1, 1], [-1, 0], [-1, 1]], [[1, 0]], [[1, 1], [-1, 1]], [[1, 1], [-1, 1]], [[-1, 0]]], [[[0, 1], [-1, 1], [0, -1], [1, -1]], [[1, -1]], [[0, 1], [1, -1]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[-1, 0], [1, -1], [1, 0], [1, 1]], [[1, -1]], [[1, 1]], [[-1, 0], [1, 1]], [[-1, 0], [1, -1]]], [[[0, -1], [-1, -1], [0, 1], [-1, 1]], [[-1, 1], [-1, -1]], [[-1, 1], [-1, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [-1, -1], [0, 1], [-1, 1]], [[-1, 1], [-1, -1]], [[-1, 1], [-1, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [-1, -1], [0, 1], [-1, 1]], [[-1, 1], [-1, -1]], [[-1, 1], [-1, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [-1, -1], [0, 1], [-1, 1]], [[-1, 1], [-1, -1]], [[-1, 1], [-1, -1]], [[0, -1]], [[0, 1]]], [[[0, -1], [-1, -1], [0, 1], [-1, 1]], [[-1, 1], [-1, -1]], [[-1, 1], [-1, -1]], [[0, -1]], [[0, 1]]], [[[1, 0], [1, 1], [-1, 0], [-1, 1]], [[1, 0]], [[1, 1], [-1, 1]], [[1, 1], [-1, 1]], [[-1, 0]]], [[[0, 1], [-1, 1], [0, -1], [1, -1]], [[1, -1]], [[0, 1], [1, -1]], [[-1, 1]], [[-1, 1], [0, -1]]], [[[-1, 0], [1, -1], [1, 0], [1, 1]], [[1, -1]], [[1, 1]], [[-1, 0], [1, 1]], [[-1, 0], [1, -1]]]], 18: [[[[1, 0], [0, 1]], [[0, 1], [1, 0]], [[1, 0]], [[0, 0]], [[0, 1]]], [[[0, 1], [-1, 0]], [[0, 0]], [[0, 1]], [[0, 1], [-1, 0]], [[-1, 0]]], [[[-1, 0], [0, -1]], [[0, -1]], [[0, 0]], [[-1, 0]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0]], [[0, -1], [1, 0]], [[1, 0]], [[0, 0]], [[0, -1]]], [[[-1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[-1, 0], [0, 1]], [[0, 1], [-1, 0]], [[-1, 0]], [[0, 0]], [[0, 1]]], [[[0, 1], [-1, 0]], [[0, 0]], [[0, 1]], [[0, 1], [-1, 0]], [[-1, 0]]], [[[-1, 0], [0, -1]], [[0, -1]], [[0, 0]], [[-1, 0]], [[-1, 0], [0, -1]]], [[[0, -1], [1, 0]], [[0, -1], [1, 0]], [[1, 0]], [[0, 0]], [[0, -1]]]], 19: [[[[0, -1], [1, -1], [-1, 0], [-2, 0]], [[0, 0], [1, -1]], [[1, -1]], [[0, -1], [-2, 0]], [[-2, 0]]], [[[1, 0], [1, 1], [0, -1], [0, -2]], [[1, 0], [0, -2]], [[1, 1]], [[1, 1], [0, 0]], [[0, -2]]], [[[0, 1], [-1, 1], [1, 0], [2, 0]], [[2, 0]], [[0, 1], [2, 0]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[-1, 0], [1, -1], [0, 1], [0, 2]], [[1, -1]], [[1, -1], [0, 2]], [[-1, 0], [0, 2]], [[-1, 0], [1, -1]]], [[[0, -1], [-1, -1], [1, 0], [2, 0]], [[0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [-1, -1], [1, 0], [2, 0]], [[0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [-1, -1], [1, 0], [2, 0]], [[0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [-1, -1], [1, 0], [2, 0]], [[0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[0, -1], [-1, -1], [1, 0], [2, 0]], [[0, 0], [-1, -1]], [[-1, -1]], [[0, -1], [2, 0]], [[2, 0]]], [[[1, 0], [1, 1], [0, -1], [0, -2]], [[1, 0], [0, -2]], [[1, 1]], [[1, 1], [0, 0]], [[0, -2]]], [[[0, 1], [-1, 1], [1, 0], [2, 0]], [[2, 0]], [[0, 1], [2, 0]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[-1, 0], [1, -1], [0, 1], [0, 2]], [[1, -1]], [[1, -1], [0, 2]], [[-1, 0], [0, 2]], [[-1, 0], [1, -1]]]], 20: [[[[-2, 0], [-1, 0], [0, -1], [1, -1]], [[0, 0], [1, -1]], [[1, -1]], [[-2, 0], [0, -1]], [[-2, 0]]], [[[0, -2], [0, -1], [1, 0], [1, 1]], [[0, -2], [1, 0]], [[1, 1]], [[1, 1], [0, 0]], [[0, -2]]], [[[2, 0], [1, 0], [0, 1], [-1, 1]], [[2, 0]], [[2, 0], [0, 1]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[0, 2], [0, 1], [-1, 0], [1, -1]], [[1, -1]], [[0, 2], [1, -1]], [[0, 2], [-1, 0]], [[-1, 0], [1, -1]]], [[[2, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [-1, -1]], [[-1, -1]], [[2, 0], [0, -1]], [[2, 0]]], [[[2, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [-1, -1]], [[-1, -1]], [[2, 0], [0, -1]], [[2, 0]]], [[[2, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [-1, -1]], [[-1, -1]], [[2, 0], [0, -1]], [[2, 0]]], [[[2, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [-1, -1]], [[-1, -1]], [[2, 0], [0, -1]], [[2, 0]]], [[[2, 0], [1, 0], [0, -1], [-1, -1]], [[0, 0], [-1, -1]], [[-1, -1]], [[2, 0], [0, -1]], [[2, 0]]], [[[0, -2], [0, -1], [1, 0], [1, 1]], [[0, -2], [1, 0]], [[1, 1]], [[1, 1], [0, 0]], [[0, -2]]], [[[2, 0], [1, 0], [0, 1], [-1, 1]], [[2, 0]], [[2, 0], [0, 1]], [[-1, 1]], [[-1, 1], [0, 0]]], [[[0, 2], [0, 1], [-1, 0], [1, -1]], [[1, -1]], [[0, 2], [1, -1]], [[0, 2], [-1, 0]], [[-1, 0], [1, -1]]]], 21: [[[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[2, 0], [1, 0], [-1, 0], [-2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 2], [0, 1], [0, -1], [0, -2]], [[0, -2]], [[0, 2]], [[0, 2]], [[0, -2]]], [[[-2, 0], [-1, 0], [1, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[0, -2], [0, -1], [0, 1], [0, 2]], [[0, 2]], [[0, -2]], [[0, -2]], [[0, 2]]], [[[2, 0], [1, 0], [-1, 0], [-2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]], [[[0, 2], [0, 1], [0, -1], [0, -2]], [[0, -2]], [[0, 2]], [[0, 2]], [[0, -2]]], [[[-2, 0], [-1, 0], [1, 0], [2, 0]], [[2, 0]], [[2, 0]], [[-2, 0]], [[-2, 0]]]]}